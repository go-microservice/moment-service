// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: api/moment/v1/comment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentServiceClient interface {
	// 发布评论
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentReply, error)
	// 更新评论
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentReply, error)
	// 删除评论
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentReply, error)
	// 回复评论
	ReplyComment(ctx context.Context, in *ReplyCommentRequest, opts ...grpc.CallOption) (*ReplyCommentReply, error)
	// 获取评论
	GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentReply, error)
	// 批量获取评论
	BatchGetComments(ctx context.Context, in *BatchGetCommentsRequest, opts ...grpc.CallOption) (*BatchGetCommentsReply, error)
	// 热门评论列表
	ListHotComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsReply, error)
	// 最新评论列表
	ListLatestComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsReply, error)
	// 评论回复列表
	ListReplyComments(ctx context.Context, in *ListReplyCommentsRequest, opts ...grpc.CallOption) (*ListReplyCommentsReply, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentReply, error) {
	out := new(CreateCommentReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.CommentService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentReply, error) {
	out := new(UpdateCommentReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.CommentService/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentReply, error) {
	out := new(DeleteCommentReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.CommentService/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) ReplyComment(ctx context.Context, in *ReplyCommentRequest, opts ...grpc.CallOption) (*ReplyCommentReply, error) {
	out := new(ReplyCommentReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.CommentService/ReplyComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentReply, error) {
	out := new(GetCommentReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.CommentService/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) BatchGetComments(ctx context.Context, in *BatchGetCommentsRequest, opts ...grpc.CallOption) (*BatchGetCommentsReply, error) {
	out := new(BatchGetCommentsReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.CommentService/BatchGetComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) ListHotComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsReply, error) {
	out := new(ListCommentsReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.CommentService/ListHotComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) ListLatestComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsReply, error) {
	out := new(ListCommentsReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.CommentService/ListLatestComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) ListReplyComments(ctx context.Context, in *ListReplyCommentsRequest, opts ...grpc.CallOption) (*ListReplyCommentsReply, error) {
	out := new(ListReplyCommentsReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.CommentService/ListReplyComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility
type CommentServiceServer interface {
	// 发布评论
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentReply, error)
	// 更新评论
	UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentReply, error)
	// 删除评论
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentReply, error)
	// 回复评论
	ReplyComment(context.Context, *ReplyCommentRequest) (*ReplyCommentReply, error)
	// 获取评论
	GetComment(context.Context, *GetCommentRequest) (*GetCommentReply, error)
	// 批量获取评论
	BatchGetComments(context.Context, *BatchGetCommentsRequest) (*BatchGetCommentsReply, error)
	// 热门评论列表
	ListHotComments(context.Context, *ListCommentsRequest) (*ListCommentsReply, error)
	// 最新评论列表
	ListLatestComments(context.Context, *ListCommentsRequest) (*ListCommentsReply, error)
	// 评论回复列表
	ListReplyComments(context.Context, *ListReplyCommentsRequest) (*ListReplyCommentsReply, error)
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentServiceServer struct {
}

func (UnimplementedCommentServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCommentServiceServer) UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCommentServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentServiceServer) ReplyComment(context.Context, *ReplyCommentRequest) (*ReplyCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyComment not implemented")
}
func (UnimplementedCommentServiceServer) GetComment(context.Context, *GetCommentRequest) (*GetCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedCommentServiceServer) BatchGetComments(context.Context, *BatchGetCommentsRequest) (*BatchGetCommentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetComments not implemented")
}
func (UnimplementedCommentServiceServer) ListHotComments(context.Context, *ListCommentsRequest) (*ListCommentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHotComments not implemented")
}
func (UnimplementedCommentServiceServer) ListLatestComments(context.Context, *ListCommentsRequest) (*ListCommentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLatestComments not implemented")
}
func (UnimplementedCommentServiceServer) ListReplyComments(context.Context, *ListReplyCommentsRequest) (*ListReplyCommentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReplyComments not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.CommentService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.CommentService/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.CommentService/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_ReplyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).ReplyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.CommentService/ReplyComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).ReplyComment(ctx, req.(*ReplyCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.CommentService/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetComment(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_BatchGetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).BatchGetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.CommentService/BatchGetComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).BatchGetComments(ctx, req.(*BatchGetCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_ListHotComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).ListHotComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.CommentService/ListHotComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).ListHotComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_ListLatestComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).ListLatestComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.CommentService/ListLatestComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).ListLatestComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_ListReplyComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReplyCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).ListReplyComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.CommentService/ListReplyComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).ListReplyComments(ctx, req.(*ListReplyCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.moment.v1.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _CommentService_CreateComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CommentService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentService_DeleteComment_Handler,
		},
		{
			MethodName: "ReplyComment",
			Handler:    _CommentService_ReplyComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _CommentService_GetComment_Handler,
		},
		{
			MethodName: "BatchGetComments",
			Handler:    _CommentService_BatchGetComments_Handler,
		},
		{
			MethodName: "ListHotComments",
			Handler:    _CommentService_ListHotComments_Handler,
		},
		{
			MethodName: "ListLatestComments",
			Handler:    _CommentService_ListLatestComments_Handler,
		},
		{
			MethodName: "ListReplyComments",
			Handler:    _CommentService_ListReplyComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/moment/v1/comment.proto",
}
