// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: api/moment/v1/like.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LikeServiceClient is the client API for LikeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LikeServiceClient interface {
	// 创建点赞
	CreateLike(ctx context.Context, in *CreateLikeRequest, opts ...grpc.CallOption) (*CreateLikeReply, error)
	// 更新点赞
	UpdateLike(ctx context.Context, in *UpdateLikeRequest, opts ...grpc.CallOption) (*UpdateLikeReply, error)
	// 删除点赞
	DeleteLike(ctx context.Context, in *DeleteLikeRequest, opts ...grpc.CallOption) (*DeleteLikeReply, error)
	// 获得点赞
	GetLike(ctx context.Context, in *GetLikeRequest, opts ...grpc.CallOption) (*GetLikeReply, error)
	// 批量获取点赞
	BatchGetLikes(ctx context.Context, in *BatchGetLikesRequest, opts ...grpc.CallOption) (*BatchGetLikesReply, error)
	// 帖子点赞列表
	ListPostLikes(ctx context.Context, in *ListPostLikesRequest, opts ...grpc.CallOption) (*ListPostLikesReply, error)
	// 评论点赞列表
	ListCommentsLike(ctx context.Context, in *ListCommentLikesRequest, opts ...grpc.CallOption) (*ListCommentLikesReply, error)
}

type likeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLikeServiceClient(cc grpc.ClientConnInterface) LikeServiceClient {
	return &likeServiceClient{cc}
}

func (c *likeServiceClient) CreateLike(ctx context.Context, in *CreateLikeRequest, opts ...grpc.CallOption) (*CreateLikeReply, error) {
	out := new(CreateLikeReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.LikeService/CreateLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) UpdateLike(ctx context.Context, in *UpdateLikeRequest, opts ...grpc.CallOption) (*UpdateLikeReply, error) {
	out := new(UpdateLikeReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.LikeService/UpdateLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) DeleteLike(ctx context.Context, in *DeleteLikeRequest, opts ...grpc.CallOption) (*DeleteLikeReply, error) {
	out := new(DeleteLikeReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.LikeService/DeleteLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) GetLike(ctx context.Context, in *GetLikeRequest, opts ...grpc.CallOption) (*GetLikeReply, error) {
	out := new(GetLikeReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.LikeService/GetLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) BatchGetLikes(ctx context.Context, in *BatchGetLikesRequest, opts ...grpc.CallOption) (*BatchGetLikesReply, error) {
	out := new(BatchGetLikesReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.LikeService/BatchGetLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) ListPostLikes(ctx context.Context, in *ListPostLikesRequest, opts ...grpc.CallOption) (*ListPostLikesReply, error) {
	out := new(ListPostLikesReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.LikeService/ListPostLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) ListCommentsLike(ctx context.Context, in *ListCommentLikesRequest, opts ...grpc.CallOption) (*ListCommentLikesReply, error) {
	out := new(ListCommentLikesReply)
	err := c.cc.Invoke(ctx, "/api.moment.v1.LikeService/ListCommentsLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LikeServiceServer is the server API for LikeService service.
// All implementations must embed UnimplementedLikeServiceServer
// for forward compatibility
type LikeServiceServer interface {
	// 创建点赞
	CreateLike(context.Context, *CreateLikeRequest) (*CreateLikeReply, error)
	// 更新点赞
	UpdateLike(context.Context, *UpdateLikeRequest) (*UpdateLikeReply, error)
	// 删除点赞
	DeleteLike(context.Context, *DeleteLikeRequest) (*DeleteLikeReply, error)
	// 获得点赞
	GetLike(context.Context, *GetLikeRequest) (*GetLikeReply, error)
	// 批量获取点赞
	BatchGetLikes(context.Context, *BatchGetLikesRequest) (*BatchGetLikesReply, error)
	// 帖子点赞列表
	ListPostLikes(context.Context, *ListPostLikesRequest) (*ListPostLikesReply, error)
	// 评论点赞列表
	ListCommentsLike(context.Context, *ListCommentLikesRequest) (*ListCommentLikesReply, error)
	mustEmbedUnimplementedLikeServiceServer()
}

// UnimplementedLikeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLikeServiceServer struct {
}

func (UnimplementedLikeServiceServer) CreateLike(context.Context, *CreateLikeRequest) (*CreateLikeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLike not implemented")
}
func (UnimplementedLikeServiceServer) UpdateLike(context.Context, *UpdateLikeRequest) (*UpdateLikeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLike not implemented")
}
func (UnimplementedLikeServiceServer) DeleteLike(context.Context, *DeleteLikeRequest) (*DeleteLikeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLike not implemented")
}
func (UnimplementedLikeServiceServer) GetLike(context.Context, *GetLikeRequest) (*GetLikeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLike not implemented")
}
func (UnimplementedLikeServiceServer) BatchGetLikes(context.Context, *BatchGetLikesRequest) (*BatchGetLikesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetLikes not implemented")
}
func (UnimplementedLikeServiceServer) ListPostLikes(context.Context, *ListPostLikesRequest) (*ListPostLikesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostLikes not implemented")
}
func (UnimplementedLikeServiceServer) ListCommentsLike(context.Context, *ListCommentLikesRequest) (*ListCommentLikesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentsLike not implemented")
}
func (UnimplementedLikeServiceServer) mustEmbedUnimplementedLikeServiceServer() {}

// UnsafeLikeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LikeServiceServer will
// result in compilation errors.
type UnsafeLikeServiceServer interface {
	mustEmbedUnimplementedLikeServiceServer()
}

func RegisterLikeServiceServer(s grpc.ServiceRegistrar, srv LikeServiceServer) {
	s.RegisterService(&LikeService_ServiceDesc, srv)
}

func _LikeService_CreateLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).CreateLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.LikeService/CreateLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).CreateLike(ctx, req.(*CreateLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_UpdateLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).UpdateLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.LikeService/UpdateLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).UpdateLike(ctx, req.(*UpdateLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_DeleteLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).DeleteLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.LikeService/DeleteLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).DeleteLike(ctx, req.(*DeleteLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_GetLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).GetLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.LikeService/GetLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).GetLike(ctx, req.(*GetLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_BatchGetLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).BatchGetLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.LikeService/BatchGetLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).BatchGetLikes(ctx, req.(*BatchGetLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_ListPostLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).ListPostLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.LikeService/ListPostLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).ListPostLikes(ctx, req.(*ListPostLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_ListCommentsLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).ListCommentsLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.moment.v1.LikeService/ListCommentsLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).ListCommentsLike(ctx, req.(*ListCommentLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LikeService_ServiceDesc is the grpc.ServiceDesc for LikeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LikeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.moment.v1.LikeService",
	HandlerType: (*LikeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLike",
			Handler:    _LikeService_CreateLike_Handler,
		},
		{
			MethodName: "UpdateLike",
			Handler:    _LikeService_UpdateLike_Handler,
		},
		{
			MethodName: "DeleteLike",
			Handler:    _LikeService_DeleteLike_Handler,
		},
		{
			MethodName: "GetLike",
			Handler:    _LikeService_GetLike_Handler,
		},
		{
			MethodName: "BatchGetLikes",
			Handler:    _LikeService_BatchGetLikes_Handler,
		},
		{
			MethodName: "ListPostLikes",
			Handler:    _LikeService_ListPostLikes_Handler,
		},
		{
			MethodName: "ListCommentsLike",
			Handler:    _LikeService_ListCommentsLike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/moment/v1/like.proto",
}
